[{"model": "MainApp.snippet", "pk": 28, "fields": {"name": "python1", "lang": "py", "code": "def capitalize(String):\r\n    return String.title()\r\ncapitalize(\"shop\") # [Shop]\r\ncapitalize(\"python programming\") # [Python Programming]\r\ncapitalize(\"how are you!\") # [How Are You!]", "creation_date": "2023-07-13T20:39:36.505Z", "user": 2, "public": true}}, {"model": "MainApp.snippet", "pk": 29, "fields": {"name": "JS1", "lang": "js", "code": "let userName = 'Вася';\r\n\r\nfunction showMessage() {\r\n  let message = 'Привет, ' + userName;\r\n  alert(message);\r\n}\r\n\r\nshowMessage(); // Привет, Вася", "creation_date": "2023-07-13T20:41:39.808Z", "user": 2, "public": true}}, {"model": "MainApp.snippet", "pk": 30, "fields": {"name": "C++", "lang": "cpp", "code": "#include <iostream>\r\nusing namespace std;\r\n\r\n// display a number\r\nvoid displayNum(int n1, float n2) {\r\n    cout << \"The int number is \" << n1;\r\n    cout << \"The double number is \" << n2;\r\n}\r\n\r\nint main() {\r\n     \r\n     int num1 = 5;\r\n     double num2 = 5.5;\r\n\r\n    // calling the function\r\n    displayNum(num1, num2);\r\n\r\n    return 0;\r\n}", "creation_date": "2023-07-13T20:43:36.515Z", "user": 2, "public": true}}, {"model": "MainApp.snippet", "pk": 31, "fields": {"name": "Python2", "lang": "py", "code": "# function with two arguments\r\ndef add_numbers(num1, num2):\r\n    sum = num1 + num2\r\n    print(\"Sum: \",sum)\r\n\r\n# function call with two values\r\nadd_numbers(5, 4)\r\n\r\n# Output: Sum: 9", "creation_date": "2023-07-13T20:46:18.725Z", "user": 2, "public": false}}, {"model": "MainApp.snippet", "pk": 32, "fields": {"name": "Python3", "lang": "py", "code": "import math\r\n\r\n# sqrt computes the square root\r\nsquare_root = math.sqrt(4)\r\n\r\nprint(\"Square Root of 4 is\",square_root)\r\n\r\n# pow() comptes the power\r\npower = pow(2, 3)\r\n\r\nprint(\"2 to the power 3 is\",power)", "creation_date": "2023-07-13T20:47:39.856Z", "user": 1, "public": true}}, {"model": "MainApp.snippet", "pk": 38, "fields": {"name": "In your template, use something like:", "lang": "py", "code": "{% if messages %}\r\n<ul class=\"messages\">\r\n    {% for message in messages %}\r\n    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\r\n    {% endfor %}\r\n</ul>\r\n{% endif %}", "creation_date": "2023-07-14T10:43:00.950Z", "user": 3, "public": true}}, {"model": "MainApp.snippet", "pk": 39, "fields": {"name": "Changing the minimum recorded level per-request", "lang": "py", "code": "from django.contrib import messages\r\n\r\n# Change the messages level to ensure the debug message is added.\r\nmessages.set_level(request, messages.DEBUG)\r\nmessages.debug(request, 'Test message...')\r\n\r\n# In another request, record only messages with a level of WARNING and higher\r\nmessages.set_level(request, messages.WARNING)\r\nmessages.success(request, 'Your profile was updated.') # ignored\r\nmessages.warning(request, 'Your account is about to expire.') # recorded\r\n\r\n# Set the messages level back to default.\r\nmessages.set_level(request, None)", "creation_date": "2023-07-14T10:43:37.477Z", "user": 3, "public": true}}, {"model": "MainApp.snippet", "pk": 40, "fields": {"name": "Adding messages in class-based views", "lang": "py", "code": "from django.contrib.messages.views import SuccessMessageMixin\r\nfrom django.views.generic.edit import CreateView\r\nfrom myapp.models import Author\r\n\r\nclass AuthorCreate(SuccessMessageMixin, CreateView):\r\n    model = Author\r\n    success_url = '/success/'\r\n    success_message = \"%(name)s was created successfully\"", "creation_date": "2023-07-14T10:45:09.523Z", "user": 5, "public": true}}, {"model": "MainApp.snippet", "pk": 41, "fields": {"name": "Write your first view", "lang": "py", "code": "rom django.contrib import admin\r\nfrom django.urls import include, path\r\n\r\nurlpatterns = [\r\n    path(\"polls/\", include(\"polls.urls\")),\r\n    path(\"admin/\", admin.site.urls),\r\n]", "creation_date": "2023-07-14T10:47:23.691Z", "user": 5, "public": true}}, {"model": "MainApp.snippet", "pk": 42, "fields": {"name": "Playing with the API", "lang": "py", "code": "import datetime\r\n\r\nfrom django.db import models\r\nfrom django.utils import timezone\r\n\r\n\r\nclass Question(models.Model):\r\n    # ...\r\n    def was_published_recently(self):\r\n        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)", "creation_date": "2023-07-14T10:48:28.338Z", "user": 5, "public": true}}]